"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'
    
    if ((self.Afn in listfiles()) and (self.Bfn in listfiles())): 
      self.Afile = openfile(self.Afn,create)
      self.Afile.lock = createlock()
      self.Bfile = openfile(self.Bfn,create)
      self.Bfile.lock = createlock()
      self.Afile.lock.acquire(True)

    else:   
      # make the files and add 'SE' to the readat file...
      if create:
        self.Afile = openfile(self.Afn,create)
        self.Afile.lock = createlock()
        self.Afile.lock.acquire(True)
        self.Afile.writeat('SE',0)
        self.Bfile = openfile(self.Bfn,create)
        self.Bfile.lock = createlock()	
    
    self.Bfile.lock.acquire(True)
    arr = self.Afile.readat(None,0)
    self.Bfile.writeat(arr,0)
    self.Afile.lock.release()
    self.Bfile.lock.release()
    
  def writeat(self,data,offset):
    
    # Write the requested data to the B file using the sandbox's writeat call
    x = len(data)
    self.Afile.lock.acquire(True)
    y = len(self.Afile.readat(None,0))
    doWrite = True
    if (offset == 0):
        if not data[0] == 'S':
            doWrite = False
    if ((offset+x) >= y):
        if not data[x-1] == 'E':
            doWrite = False
        
    if (doWrite == True):
        self.Bfile.lock.acquire(True)
        self.Bfile.writeat(data,offset)
        self.Bfile.lock.release()
        
    self.Afile.lock.release()        
        
  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...
    self.Afile.lock.acquire(True)
    b = self.Afile.readat(bytes,offset)
    self.Afile.lock.release()
    return b

  def close(self):
    self.Afile.close()
    if (self.Afn in listfiles()):
        removefile(self.Afn)
    self.Afile = openfile(self.Afn,True) 
    self.Afile.lock = createlock()
    self.Afile.lock.acquire(True)
    self.Bfile.lock.acquire(True)
    arr = self.Bfile.readat(None,0)
    self.Afile.writeat(arr,0)
    self.Afile.lock.release()
    self.Bfile.lock.release()
    self.Bfile.close()
    if (self.Bfn in listfiles()):
        removefile(self.Bfn)
    self.Bfile = openfile(self.Bfn,True)     
    self.Afile.close()
    self.Bfile.close()

def ABopenfile(filename, create):
  return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()
